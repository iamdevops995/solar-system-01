workflow:
    name: Solar System NodeJS Pipeline
    rules:
        - if: $CI_COMMIT_BRANCH == 'main' || $CI_COMMIT_BRANCH =~ /^feature/
          when: always
        - if: $CI_MERGE_REQUEST_SOURCE_BRANCH_NAME =~ /^feature/ && $CI_PIPELINE_SOURCE == 'merge_request_event'
          when: always
          
stages:
  - test
  - containerization
  - dev-deploy

variables:
    DOCKER_USERNAME: siddharth67
    IMAGE_VERSION: $CI_PIPELINE_ID
#   MONGO_URI: 'mongodb+srv://supercluster.d83jj.mongodb.net/superData'
#   MONGO_USERNAME: superuser
#   MONGO_PASSWORD: $M_DB_PASSWORD

# unit_testing:
#   stage: test
#   image: node:17-alpine3.14
#   services:
#     - name: siddharth67/mongo-db:non-prod
#       alias: mongo
#       pull_policy: always
#   variables:
#     MONGO_URI: 'mongodb://mongo:27017/superData'
#     MONGO_USERNAME: non-prod-user
#     MONGO_PASSWORD: non-prod-password
#   cache:
#     policy: pull-push
#     when: on_success
#     paths:
#       - node_modules
#     key:
#       files:
#         - package-lock.json
#       prefix: node_modules
#   before_script:
#     - npm install
#   script:
#     - npm test
#   artifacts:
#     when: always
#     expire_in: 3 days
#     name: Moca-Test-Result
#     paths:
#       - test-results.xml
#     reports:
#       junit: test-results.xml

# code_coverage:
#   stage: test
#   image: node:17-alpine3.14
#   services:
#     - name: siddharth67/mongo-db:non-prod
#       alias: mongo
#       pull_policy: always
#   variables:
#     MONGO_URI: 'mongodb://mongo:27017/superData'
#     MONGO_USERNAME: non-prod-user
#     MONGO_PASSWORD: non-prod-password
#   cache:
#     policy: pull-push
#     when: on_success
#     paths:
#       - node_modules
#     key:
#       files:
#         - package-lock.json
#       prefix: node_modules
#   before_script:
#     - npm install
#   script:
#     - npm run coverage
#   artifacts:
#     name: Code-Coverage-Result
#     when: always
#     expire_in: 3 days
#     reports:
#       coverage_report:
#         coverage_format: cobertura
#         path: coverage/cobertura-coverage.xml
#   coverage: /All files[^|]*\|[^|]*\s+([\d\.]+)/
#   allow_failure: true

# docker_build:
#   stage: containerization
#   image: docker:24.0.5
#   dependencies: []
#   services:
#     - docker:24.0.5-dind
#   script:
#     - docker build -t $DOCKER_USERNAME/solar-system:$IMAGE_VERSION .
#     - docker images $DOCKER_USERNAME/solar-system:$IMAGE_VERSION
#     - mkdir image
#     - docker save $DOCKER_USERNAME/solar-system:$IMAGE_VERSION > image/solar-system-image-$IMAGE_VERSION.tar
#   artifacts:
#     paths:
#       - image
#     when: on_success
#     expire_in: 3 days

# docker_test:
#   stage: containerization
#   image: docker:24.0.5
#   needs:
#     - docker_build
#   services:
#     - docker:24.0.5-dind
#   script:
#     - docker load -i image/solar-system-image-$IMAGE_VERSION.tar
#     - docker run --name solar-system-app -d -p 3000:3000 $DOCKER_USERNAME/solar-system:$IMAGE_VERSION
#     - export IP=$(docker inspect -f '{{range .NetworkSettings.Networks}}{{.IPAddress}}{{end}}' solar-system-app)
#     - echo $IP
#     - docker run  alpine wget -q -O - http://$IP:3000/live | grep live

# docker_push:  
#   stage: containerization
#   needs:
#     - docker_build
#     - docker_test
#   image: docker:24.0.5
#   services:
#     - docker:24.0.5-dind
#   script:
#     -  docker load -i image/solar-system-image-$IMAGE_VERSION.tar
#     -  docker login --username=$DOCKER_USERNAME --password=$DOCKER_PASSWORD
#     -  docker push $DOCKER_USERNAME/solar-system:$IMAGE_VERSION

# publish_gitlab_container_registry:  
#   stage: containerization
#   needs:
#     - docker_build
#     - docker_test
#   image: docker:24.0.5
#   services:
#     - docker:24.0.5-dind
#   script:
#     -  docker load -i image/solar-system-image-$CI_PIPELINE_ID.tar
#     -  echo "$CI_REGISTRY -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY_IMAGE"
#     -  docker login $CI_REGISTRY -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD
#     -  docker tag $DOCKER_USERNAME/solar-system:$IMAGE_VERSION $CI_REGISTRY_IMAGE/ss-image:$IMAGE_VERSION 
#     -  docker images
#     -  docker push $CI_REGISTRY_IMAGE/ss-image:$IMAGE_VERSION

k8s_dev_deploy:
  stage: dev-deploy
  image:
    name: alpine:3.7
  dependencies: []
  before_script:
    - wget https://storage.googleapis.com/kubernetes-release/release/$(wget -q -O - https://storage.googleapis.com/kubernetes-release/release/stable.txt)/bin/linux/amd64/kubectl
    - chmod +x ./kubectl
    - mv ./kubectl /usr/bin/kubectl
  script:
    - kubectl version -o yaml